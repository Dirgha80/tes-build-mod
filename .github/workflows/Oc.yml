name: Build luci-app-openclash+core+ocmodv13

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */3 * * *'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      skip_build: ${{ steps.setvar.outputs.skip_build }}
      latest_ver: ${{ steps.setvar.outputs.latest_ver }}
      last_ver: ${{ steps.setvar.outputs.last_ver }}
      commit_msg: ${{ steps.commit-check.outputs.commit_msg }}
      latest_commit: ${{ steps.commit-check.outputs.latest_commit }}
      skip_release: ${{ steps.commit-check.outputs.skip_release }}
    steps:
      - name: Checkout repo build
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      # --- Notifikasi Commit ---
      - name: Cek Commit Terbaru
        id: commit-check
        run: |
          # Buat folder penyimpanan commit
          mkdir -p data/openclash
        
          # Ambil commit terbaru
          REPO="vernesong/OpenClash"
          BRANCH="dev"

          # Ambil commit terbaru dari branch dev
          COMMIT_JSON=$(curl -s "https://api.github.com/repos/$REPO/commits?per_page=1&sha=$BRANCH")

          LATEST_COMMIT=$(echo "$COMMIT_JSON" | grep -oP '"sha": "\K[0-9a-f]+' | head -n1)
          COMMIT_MSG=$(echo "$COMMIT_JSON" | grep -oP '"message": "\K[^"]+' | head -n1)
          COMMIT_AUTHOR=$(echo "$COMMIT_JSON" | grep -oP '"name": "\K[^"]+' | head -n1)
          # Ambil commit date dari API GitHub
          COMMIT_DATE=$(echo "$COMMIT_JSON" | jq -r '.[0].commit.committer.date')

          # Konversi ke WIB
          COMMIT_DATE_WIB=$(TZ="Asia/Jakarta" date -d "$COMMIT_DATE" '+%d-%m-%Y %H:%M:%S WIB')


          if [ -z "$LATEST_COMMIT" ]; then
            echo "⚠️ Gagal ambil commit dari $REPO"
            exit 1
          fi

          # Simpan commit message dan sha sebagai output
          echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT

          if [ -f data/openclash/last_commit.sha ]; then
            OLD_COMMIT=$(cat data/openclash/last_commit.sha)
          else
            OLD_COMMIT=""
          fi

          # Ambil 7 digit pertama dari commit
          SHORT_COMMIT=${LATEST_COMMIT:0:7}

          if [ "$LATEST_COMMIT" != "$OLD_COMMIT" ]; then
            # Simpan commit terbaru
            echo "$LATEST_COMMIT" > data/openclash/last_commit.sha
            git config user.name "github-actions"
            git config user.email "actions@github.com"
            git add data/openclash/last_commit.sha
            git commit -m "Update last_commit.sha ke $LATEST_COMMIT" --quiet || true
            git pull --rebase --quiet || true
            git push --quiet || true

            # Tandai agar release dijalankan
            echo "skip_release=false" >> $GITHUB_OUTPUT

            # Kirim Notifikasi Commit ke Telegram
            COMMIT_MSG=$(echo "$COMMIT_MSG" | sed 's/\&/\\&/g')
            COMMIT_URL="https://github.com/$REPO/commit/$LATEST_COMMIT"
            MSG="🆕 <b>Commit baru terdeteksi</b>
          क══════════क⊹⊱✫⊰⊹क══════════क
          📌 <b>Commit:</b> <a href='$COMMIT_URL'>$SHORT_COMMIT</a>
          📌 <b>Author:</b> $COMMIT_AUTHOR
          📌 <b>Tanggal:</b> $COMMIT_DATE_WIB
          क══════════क⊹⊱✫⊰⊹क══════════क
          💬 <b>Message:</b> $COMMIT_MSG"

          else
            # Commit lama → release skip
            echo "skip_release=true" >> $GITHUB_OUTPUT
          # Versi baru terdeteksi → notif build dimulai
            COMMIT_MSG=$(echo "$COMMIT_MSG" | sed 's/\&/\\&/g')
            COMMIT_URL="https://github.com/$REPO/commit/$LATEST_COMMIT"
            MSG="🆕 <b>openClash tidak ada Commit baru</b>
          क══════════क⊹⊱✫⊰⊹क══════════क
          📌 <b>Commit lama:</b> <a href='$COMMIT_URL'>$SHORT_COMMIT</a>
          📌 <b>Author:</b> $COMMIT_AUTHOR
          📌 <b>Tanggal:</b> $COMMIT_DATE_WIB
          क══════════क⊹⊱✫⊰⊹क══════════क
          💬 <b>Message:</b> $COMMIT_MSG"
          fi
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
              -d text="$MSG" \
              -d parse_mode="HTML" \
              -d disable_web_page_preview=true
               

      - name: Cek versi terbaru
        id: setvar
        run: |
          # Buat folder data untuk simpan info versi
          mkdir -p data/openclash

          # Path file versi
          LAST_VER_FILE="data/openclash/last_version.txt"
        
          LATEST_VER=$(curl -s https://raw.githubusercontent.com/vernesong/OpenClash/dev/luci-app-openclash/Makefile | grep -oP '(?<=PKG_VERSION:=)[0-9\.]+')
          echo "latest_ver=$LATEST_VER" >> $GITHUB_OUTPUT
          echo "Versi terbaru: $LATEST_VER"
          
           # Baca versi lama
          if [ -f "$LAST_VER_FILE" ]; then
            LAST_VER=$(cat "$LAST_VER_FILE")
          else
            LAST_VER="belum ada"
          fi
          echo "last_ver=$LAST_VER" >> $GITHUB_OUTPUT
          echo "Versi lama: $LAST_VER"

          if [ "$LAST_VER" = "$LATEST_VER" ]; then
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "$LATEST_VER" > "$LAST_VER_FILE"
            git config user.name "github-actions"
            git config user.email "actions@github.com"
            git add "$LAST_VER_FILE"
            git commit -m "Update $LAST_VER_FILE ke $LATEST_VER" --quiet || true
            git pull --rebase --quiet || true
            git push --quiet || true
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Notif Telegram versi terbaru
        run: |
          VER="v${{ steps.setvar.outputs.latest_ver }}"
          BASE_URL="https://github.com/tes-rep/OpenClash/releases/download/$VER"
          RELEASE_URL="https://github.com/tes-rep/OpenClash/releases/tag/$VER"
          OLD_VER="v${{ steps.setvar.outputs.last_ver }}"
          

          if [[ "${{ steps.setvar.outputs.skip_build }}" == "true" ]]; then
          # Versi sama dengan terakhir
          STATUS="ℹ️ <b>Tidak ada versi baru</b>"
          HEADER="Versi terakhir: <b>$VER</b>"
          MSG=$(printf "%s\n%s\n\nक═════क⊹⊱✫⊰⊹क═════क\n🔗 <b>Release:</b> <a href=\"%s\">Klik di sini</a>\n📦 <b>IPK:</b> <a href=\"%s/luci-app-openclash_%s_all.ipk\">Download</a>\n📱 <b>APK:</b> <a href=\"%s/luci-app-openclash-%s.apk\">Download</a>" \
            "$STATUS" \
            "$HEADER" \
            "$RELEASE_URL" \
            "$BASE_URL" "$VER" \
            "$BASE_URL" "$VER")
          else
          # Versi baru terdeteksi → notif build dimulai
            MSG=$(printf "⚡ <b>Build OpenClash dimulai...</b>\nक═════क⊹⊱✫⊰⊹क═════क\n📌 <b>Versi baru:</b> %s\n📌 <b>Versi lama:</b> %s\nक═════क⊹⊱✫⊰⊹क═════क\nHarap tunggu beberapa menit 🚀" \
              "$VER" \
              "$OLD_VER")
          fi

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$MSG" \
            -d parse_mode="HTML" \
            -d disable_web_page_preview=true

      - name: notif build
        if: steps.commit-check.outputs.skip_release == 'false'
        run: |
          VER="v${{ steps.setvar.outputs.latest_ver }}"
          RELEASE_URL="https://github.com/tes-rep/OpenClash/releases/tag/$VER"
          BASE_URL="https://github.com/tes-rep/OpenClash/releases/download/$VER"
          OLD_VER="v${{ steps.setvar.outputs.last_ver }}"
          
          # Versi baru terdeteksi → notif build dimulai
            MSG=$(printf "⚡ <b>Build OpenClash dimulai...</b>\nक═══════क⊹⊱✫⊰⊹क═══════क\n📌 <b>Versi baru:</b> %s\n📌 <b>Versi lama:</b> %s\nक═══════क⊹⊱✫⊰⊹क═══════क\nHarap tunggu beberapa menit 🚀" \
              "$VER" \
              "$OLD_VER")

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$MSG" \
            -d parse_mode="HTML" \
            -d disable_web_page_preview=true   

      

  build:
    needs: check-version
    if: needs.check-version.outputs.skip_build == 'false' || needs.check-version.outputs.skip_release == 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ipk, mod, core, apk]

    steps:

      - name: Catat waktu mulai
        run: |
          echo "BUILD_START=$(date +%s)" >> $GITHUB_OUTPUT
          echo "BUILD_START_HUMAN=$(TZ=Asia/Jakarta date '+%Y-%m-%d %H:%M:%S WIB')" >> $GITHUB_OUTPUT
    
      - name: Checkout build repo
        uses: actions/checkout@v4

      - name: Download & Extract SDK (untuk IPK, MOD, CORE)
        if: matrix.target != 'apk'
        id: download_sdk_ori
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/ORI
          key: sdk-ipk-${{ needs.check-version.outputs.latest_ver }}

      - name: Download SDK if cache miss
        if: matrix.target != 'apk' && steps.download_sdk_ori.outputs.cache-hit != 'true'
        run: |
          curl -SLk --retry 3 "https://github.com/tes-rep/tes-build/releases/download/SDK2/15.tar.bz2" -o /tmp/SDK.tar.bz2
          tar -xjf /tmp/SDK.tar.bz2 -C /tmp
          mv /tmp/OpenWrt-SDK-* "$GITHUB_WORKSPACE/ORI"

      - name: Download & Extract SDK Snapshot (untuk APK)
        if: matrix.target == 'apk'
        id: download_sdk_apk
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/SNAPSDK
          key: sdk-snap-${{ needs.check-version.outputs.latest_ver }}

      - name: Download SDK Snapshot if cache miss
        if: matrix.target == 'apk' && steps.download_sdk_apk.outputs.cache-hit != 'true'
        run: |
          curl -SLk --retry 3 "https://github.com/tes-rep/tes-build/releases/download/SDK2/snap.tar.zst" -o /tmp/SNAPSDK.tar.zst
          tar --zstd -xf /tmp/SNAPSDK.tar.zst -C /tmp
          mv /tmp/openwrt-sdk-* $GITHUB_WORKSPACE/SNAPSDK
      
      - name: Clone luci-app-openclash
        run: |
          set -e
          TARGET_DIR=""
          if [ "${{ matrix.target }}" == "ipk" ]; then
            cp -r $GITHUB_WORKSPACE/ORI $GITHUB_WORKSPACE/SDK
            TARGET_DIR="$GITHUB_WORKSPACE/SDK"
          elif [ "${{ matrix.target }}" == "mod" ]; then
            cp -r $GITHUB_WORKSPACE/ORI $GITHUB_WORKSPACE/MOD
            TARGET_DIR="$GITHUB_WORKSPACE/MOD"
          elif [ "${{ matrix.target }}" == "core" ]; then
            cp -r $GITHUB_WORKSPACE/ORI $GITHUB_WORKSPACE/CORE
            TARGET_DIR="$GITHUB_WORKSPACE/CORE"
          elif [ "${{ matrix.target }}" == "apk" ]; then
            TARGET_DIR="$GITHUB_WORKSPACE/SNAPSDK"
          fi
          
          cd "$TARGET_DIR/package"
          if [ -d "luci-app-openclash" ]; then
            cd luci-app-openclash
            git fetch --depth 1 origin dev
            git reset --hard origin/dev
          else
            git clone --depth 1 --branch dev --filter=blob:none --sparse https://github.com/vernesong/OpenClash luci-app-openclash
            cd luci-app-openclash && git sparse-checkout set luci-app-openclash
          fi
          
      - name: Tambahkan file patch (MOD, CORE, APK)
        if: matrix.target == 'mod' || matrix.target == 'core' || matrix.target == 'apk'
        run: |
          set -e
          TARGET_DIR=""
          if [ "${{ matrix.target }}" == "mod" ]; then
            TARGET_DIR="$GITHUB_WORKSPACE/MOD"
          elif [ "${{ matrix.target }}" == "core" ]; then
            TARGET_DIR="$GITHUB_WORKSPACE/CORE"
          elif [ "${{ matrix.target }}" == "apk" ]; then
            TARGET_DIR="$GITHUB_WORKSPACE/SNAPSDK"
          fi

          mkdir -p "$TARGET_DIR/package/luci-app-openclash/luci-app-openclash/root/www/tinyfm"
          cp "$GITHUB_WORKSPACE/data/openclash/oceditor.php" "$TARGET_DIR/package/luci-app-openclash/luci-app-openclash/root/www/tinyfm/"
          
          mkdir -p "$TARGET_DIR/package/luci-app-openclash/luci-app-openclash/root/usr/share/openclash"
          cp "$GITHUB_WORKSPACE/data/openclash/ocmod.sh" "$TARGET_DIR/package/luci-app-openclash/luci-app-openclash/root/usr/share/openclash/"
          chmod +x "$TARGET_DIR/package/luci-app-openclash/luci-app-openclash/root/usr/share/openclash/ocmod.sh"
          
          # Hapus postinst-pkg jika ada, lalu tambahkan postinst baru di Makefile
          cd "$TARGET_DIR/package/luci-app-openclash/luci-app-openclash"
          sed -i '/define Package\/luci-app-openclash\/postinst-pkg/,/endef/d' Makefile
          cat >> Makefile <<'EOF'
          define Package/luci-app-openclash/postinst
          #!/bin/sh
          [ -n "$$IPKG_INSTROOT" ] || {
              chmod +x /usr/share/openclash/ocmod.sh
              sh /usr/share/openclash/ocmod.sh
              rm -f /usr/share/openclash/ocmod.sh
          }
          exit 0
          endef
          EOF

      - name: Download mihomo core (CORE, APK)
        if: matrix.target == 'core' || matrix.target == 'apk'
        run: |
          set -e
          TARGET_DIR=""
          if [ "${{ matrix.target }}" == "core" ]; then
            TARGET_DIR="$GITHUB_WORKSPACE/CORE"
          elif [ "${{ matrix.target }}" == "apk" ]; then
            TARGET_DIR="$GITHUB_WORKSPACE/SNAPSDK"
          fi
          
          cd "$TARGET_DIR/package/luci-app-openclash/luci-app-openclash"
          mkdir -p root/etc/openclash/core
          TAG="Prerelease-Alpha"
          CORE_URL=$(curl -s https://api.github.com/repos/tes-rep/mihomo/releases/tags/$TAG | jq -r '.assets[] | select(.name | test("linux-arm64.*gz$")) | .browser_download_url')
          
          rm -f root/etc/openclash/core/clash_meta
          wget -O root/etc/openclash/core/clash_meta.gz "$CORE_URL"
          gunzip root/etc/openclash/core/clash_meta.gz
          chmod +x root/etc/openclash/core/clash_meta

      - name: Compile po2lmo
        run: |
          set -e
          TARGET_DIR=""
          if [ "${{ matrix.target }}" == "ipk" ]; then TARGET_DIR="$GITHUB_WORKSPACE/SDK"; fi
          if [ "${{ matrix.target }}" == "mod" ]; then TARGET_DIR="$GITHUB_WORKSPACE/MOD"; fi
          if [ "${{ matrix.target }}" == "core" ]; then TARGET_DIR="$GITHUB_WORKSPACE/CORE"; fi
          if [ "${{ matrix.target }}" == "apk" ]; then TARGET_DIR="$GITHUB_WORKSPACE/SNAPSDK"; fi

          cd "$TARGET_DIR/package/luci-app-openclash/luci-app-openclash/tools/po2lmo"
          make && sudo make install

      - name: Compile luci-app-openclash
        run: |
          set -e
          TARGET_DIR=""
          FILE_SUFFIX=""
          if [ "${{ matrix.target }}" == "ipk" ]; then 
            TARGET_DIR="$GITHUB_WORKSPACE/SDK"
            FILE_SUFFIX="_all.ipk"
          elif [ "${{ matrix.target }}" == "mod" ]; then
            TARGET_DIR="$GITHUB_WORKSPACE/MOD"
            FILE_SUFFIX="_all-mod.ipk"
          elif [ "${{ matrix.target }}" == "core" ]; then
            TARGET_DIR="$GITHUB_WORKSPACE/CORE"
            FILE_SUFFIX="_all-core.ipk"
          elif [ "${{ matrix.target }}" == "apk" ]; then
            TARGET_DIR="$GITHUB_WORKSPACE/SNAPSDK"
            FILE_SUFFIX=".apk"
          fi
          
          cd "$TARGET_DIR"
          if [ "${{ matrix.target }}" == "apk" ]; then
          make defconfig
          make package/luci-app-openclash/luci-app-openclash/compile V=99
          else
          make package/luci-app-openclash/luci-app-openclash/compile V=99
          fi
          
          # Cari output file dengan pola lebih fleksibel
          if [ "${{ matrix.target }}" = "apk" ]; then
            FOUND=$(find bin/ -type f -name "*.apk" | head -n1 || true)
            OUT_NAME="luci-app-openclash-${{ needs.check-version.outputs.latest_ver }}.apk"
          else
            FOUND=$(find bin/ -type f -name "luci-app-openclash*.ipk" | head -n1 || true)
            OUT_NAME="luci-app-openclash_${{ needs.check-version.outputs.latest_ver }}${FILE_SUFFIX}"
          fi

          if [ -z "$FOUND" ]; then
            echo "❌ Output tidak ditemukan di folder bin/"
            ls -R bin/ || true
            exit 1
          fi

          # pastikan folder release ada
          RELEASE_DIR="$GITHUB_WORKSPACE/release/${{ matrix.target }}"
          mkdir -p "$RELEASE_DIR"

          cp "$FOUND" "$RELEASE_DIR/$OUT_NAME"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openclash-${{ matrix.target }}
          path: release/${{ matrix.target }}/*


  release:
    needs: [build, check-version]
    if: success() && (needs.check-version.outputs.skip_build == 'false' || needs.check-version.outputs.skip_release == 'false')
    runs-on: ubuntu-latest
    steps:
     
      - name: Download IPK artifact
        uses: actions/download-artifact@v4
        with:
          name: openclash-ipk
          path: release/ipk

      - name: Download MOD artifact
        uses: actions/download-artifact@v4
        with:
          name: openclash-mod
          path: release/mod

      - name: Download CORE artifact
        uses: actions/download-artifact@v4
        with:
          name: openclash-core
          path: release/core

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: openclash-apk
          path: release/apk


      - name: Upload ke Release
        id: upload_release
        uses: softprops/action-gh-release@v1
        with:
          repository: tes-rep/OpenClash
          tag_name: v${{ needs.check-version.outputs.latest_ver }}
          name: "v${{ needs.check-version.outputs.latest_ver }}"
          body: |
            ## OpenClash v${{ needs.check-version.outputs.latest_ver }}
            **Changelog:**
            - Update versi terbaru dari vernesong/dev
            - **Full Changelog**: https://github.com/vernesong/OpenClash/commits/dev/
            - Commit terakhir: ${{ needs.check-version.outputs.commit_msg }}
            - Build IPK & APK
          files: |
            release/ipk/*
            release/mod/*
            release/core/*
            release/apk/*
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT3 }}

      - name: Notif Telegram Build Selesai
        if: success()
        run: |
          BUILD_END=$(date +%s)
          DURATION=$((BUILD_END - BUILD_START))
          MIN=$((DURATION / 60))
          SEC=$((DURATION % 60))
          
          VER="v${{ needs.check-version.outputs.latest_ver }}"
          RELEASE_URL="https://github.com/tes-rep/OpenClash/releases/tag/$VER"
          BASE_URL="https://github.com/tes-rep/OpenClash/releases/download/$VER"
          OLD_VER="v${{ needs.check-version.outputs.last_ver }}"
          
          
          MSG=$(printf "✅ Build OpenClash Selesai!\nक══════क⊹⊱✫⊰⊹क══════क\nVersi baru: %s\nVersi lama: %s\nक══════क⊹⊱✫⊰⊹क══════क\n🕒 Start: %s\n⏱ Durasi: %dm %ds\nक══════क⊹⊱✫⊰⊹क══════क\n🔗 Release: <a href=\"%s\">Klik di sini</a>\n📦 IPK: <a href=\"%s/luci-app-openclash_%s_all.ipk\">Download</a>\n📱 APK: <a href=\"%s/luci-app-openclash-%s.apk\">Download</a>\n📦 MOD: <a href=\"%s/luci-app-openclash_%s_all-mod.ipk\">Download</a>\n📱 CORE: <a href=\"%s/luci-app-openclash_%s_all-core.ipk\">Download</a>" \
            "$VER" \
            "$OLD_VER" \
            "$START_HUMAN" \
            "$MIN" "$SEC" \
            "$RELEASE_URL" \
            "$BASE_URL" "${{ needs.check-version.outputs.latest_ver }}" \
            "$BASE_URL" "${{ needs.check-version.outputs.latest_ver }}" \
            "$BASE_URL" "${{ needs.check-version.outputs.latest_ver }}" \
            "$BASE_URL" "${{ needs.check-version.outputs.latest_ver }}" )
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$MSG" \
            -d parse_mode="HTML" \
            -d disable_web_page_preview=true
