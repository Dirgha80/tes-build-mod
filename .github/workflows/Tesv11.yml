name: TEST v11 - Full or Partial Sync

on:
  workflow_dispatch:
    inputs:
      rootfs_url:
        description: 'URL file arsip driver (tar.gz, zip, zst, dll) atau kosong jika pakai repo'
        required: false
        default: ''
        type: string
      type_file:
        description: 'Ekstensi file (misal: zip, tar.gz, img)'
        required: false
        default: ''
        type: string
      repo_clone_url:
        description: 'Repo GitHub sumber (contoh: https://github.com/unifreq/linux-5.15.y.git)'
        required: false
        default: 'https://github.com/unifreq/linux-5.15.y.git'
        type: string
      driver_type:
        description: 'Path sumber (kosongkan untuk salin seluruh repo)'
        required: false
        default: ''
        type: string
      target_path:
        description: 'Path tujuan di repo target (kosongkan untuk root)'
        required: false
        default: ''
        type: string
      target_repo:
        description: 'Target repo GitHub (contoh: houjie/linux-openwrt)'
        required: true
        type: string
      target_branch:
        description: 'Target branch di repo tujuan'
        required: false
        default: coba
        type: string
      token_option:
        description: 'Pilih token GitHub (PAT)'
        required: true
        default: tes-rep
        type: choice
        options:
          - tes-rep
          - kernel54
          - dirgha80

jobs:
  sync_driver:
    runs-on: ubuntu-latest

    steps:
      - name: Set Token from Input
        id: choose_token
        run: |
          case "${{ github.event.inputs.token_option }}" in
            tes-rep)
              echo "PAT=${{ secrets.TARGET_REPO_PAT }}" >> $GITHUB_ENV
              ;;
            kernel54)
              echo "PAT=${{ secrets.TARGET_REPO_PAT2 }}" >> $GITHUB_ENV
              ;;
            dirgha80)
              echo "PAT=${{ secrets.TARGET_REPO_PAT3 }}" >> $GITHUB_ENV
              ;;
            *)
              echo "::error ::Pilihan token tidak valid!"
              exit 1
              ;;
          esac

      - name: Normalize Target Repo
        id: fixrepo
        run: |
          repo="${{ github.event.inputs.target_repo }}"
          if [[ "$repo" == https://github.com/* ]]; then
            repo="${repo#https://github.com/}"
            repo="${repo%/}"
          fi
          echo "normalized_repo=$repo" >> $GITHUB_OUTPUT

      - name: Validate Inputs
        if: ${{ github.event.inputs.driver_type != '' && github.event.inputs.target_path == '' }}
        run: |
          echo "::error ::'target_path' wajib diisi jika 'driver_type' ditentukan."
          exit 1

      - name: Install Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 unzip megatools zstd wget npm
          python3 -m pip install --upgrade gdown
          sudo npm install -g mediafire-dl

      - name: Download file ${{ github.event.inputs.type_file }}
        if: ${{ github.event.inputs.rootfs_url != '' }}
        run: |
          mkdir -p build

          echo "[üîç] Mendeteksi sumber dari: ${{ github.event.inputs.rootfs_url }}"

          if echo "${{ github.event.inputs.rootfs_url }}" | grep -q "drive."; then
            echo "[üåê] Sumber: Google Drive"
            if echo "${{ github.event.inputs.rootfs_url }}" | awk -F "/" '{print $6}' | grep -q .; then
              link_gdrive=$(echo "${{ github.event.inputs.rootfs_url }}" | awk -F "/" '{print $6}')
            else
              link_gdrive=$(echo "${{ github.event.inputs.rootfs_url }}" | awk -F "/" '{print $4}' | awk -F "?id=" '{print $2}' | awk -F "&export" '{print $1}')
            fi
            echo "[‚¨áÔ∏è] Mengunduh dari Google Drive: ID $link_gdrive"
            sudo gdown "$link_gdrive" -O build/file.${{ github.event.inputs.type_file }}

          elif echo "${{ github.event.inputs.rootfs_url }}" | grep -q "mediafire.com"; then
            echo "[üåê] Sumber: MediaFire"
            echo "[‚¨áÔ∏è] Mengunduh dari MediaFire: ${{ github.event.inputs.rootfs_url }}"
            sudo mediafire-dl "${{ github.event.inputs.rootfs_url }}" -o build/file.${{ github.event.inputs.type_file }}

          elif echo "${{ github.event.inputs.rootfs_url }}" | grep -q "mega.nz"; then
            echo "[üåê] Sumber: MEGA.nz"
            echo "[‚¨áÔ∏è] Mengunduh dari MEGA: ${{ github.event.inputs.rootfs_url }}"
            file_mega=$(sudo mega-get "${{ github.event.inputs.rootfs_url }}" | awk -F: '{print $2}' | tr -d ' ')
            sudo mv "${file_mega}" "build/file.${{ github.event.inputs.type_file }}"

          else
            echo "[üåê] Sumber: URL langsung"
            echo "[‚¨áÔ∏è] Mengunduh dari URL: ${{ github.event.inputs.rootfs_url }}"
            sudo wget --no-check-certificate "${{ github.event.inputs.rootfs_url }}" -O build/file.${{ github.event.inputs.type_file }}
          fi

          echo "[‚úÖ] File berhasil diunduh ke build/file.${{ github.event.inputs.type_file }}"

      - name: Extract Archive
        if: ${{ github.event.inputs.rootfs_url != '' && github.event.inputs.type_file != '' }}
        run: |
          mkdir -p extracted
          file_type=$(file build/file.${{ github.event.inputs.type_file }})

          if [[ "$file_type" =~ "gzip compressed" ]]; then
            tar -xzf build/file.${{ github.event.inputs.type_file }} -C extracted
          elif [[ "$file_type" =~ "Zip archive data" ]]; then
            unzip -o build/file.${{ github.event.inputs.type_file }} -d extracted
          elif [[ "$file_type" =~ "Zstandard compressed" ]]; then
            tar --use-compress-program=unzstd -xf build/file.${{ github.event.inputs.type_file }} -C extracted
          elif [[ "$file_type" =~ "POSIX tar archive" ]]; then
            tar -xf build/file.${{ github.event.inputs.type_file }} -C extracted
          else
            echo "Unsupported archive format or not an archive, skipping extraction."
          fi

      - name: Clone Driver Repo
        if: ${{ github.event.inputs.rootfs_url == '' }}
        run: |
          git clone --depth=1 "${{ github.event.inputs.repo_clone_url }}" driver-clone

      - name: Clone Target Repo
        run: |
          git clone https://x-access-token:${{ env.PAT }}@github.com/${{ steps.fixrepo.outputs.normalized_repo }}.git target-repo
          cd target-repo
          git checkout ${{ github.event.inputs.target_branch }} || git checkout -b ${{ github.event.inputs.target_branch }}

      - name: Copy All (Repo mode)
        if: ${{ github.event.inputs.rootfs_url == '' && github.event.inputs.driver_type == '' }}
        run: |
          rsync -a --exclude='.git' driver-clone/ target-repo/

      - name: Copy All (Archive mode)
        if: ${{ github.event.inputs.rootfs_url != '' && github.event.inputs.driver_type == '' }}
        run: |
          cd extracted
          entry_count=$(find . -mindepth 1 -maxdepth 1 -type d | wc -l)
          if [ "$entry_count" -eq 1 ]; then
            cd "$(find . -mindepth 1 -maxdepth 1 -type d)"
          fi
          rsync -a --exclude='.git' ./ ../../target-repo/
          cd ../..

      - name: Copy Custom Path (Repo mode)
        if: ${{ github.event.inputs.rootfs_url == '' && github.event.inputs.driver_type != '' }}
        run: |
          src="driver-clone/${{ github.event.inputs.driver_type }}"
          dst="target-repo/${{ github.event.inputs.target_path }}"
          mkdir -p "$(dirname "$dst")"
          rsync -a --exclude='.git' "$src" "$(dirname "$dst")/"

      - name: Copy Custom Path (Archive mode)
        if: ${{ github.event.inputs.rootfs_url != '' && github.event.inputs.driver_type != '' }}
        run: |
          cd extracted
          entry_count=$(find . -mindepth 1 -maxdepth 1 -type d | wc -l)
          if [ "$entry_count" -eq 1 ]; then
            cd "$(find . -mindepth 1 -maxdepth 1 -type d)"
          fi
          src="${{ github.event.inputs.driver_type }}"
          dst="../../target-repo/${{ github.event.inputs.target_path }}"
          mkdir -p "$(dirname "$dst")"
          rsync -a --exclude='.git' "$src" "$(dirname "$dst")/"
          cd ../..

      - name: Commit and Push
        run: |
          cd target-repo
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          if git diff --cached --quiet; then
            echo "‚úÖ Tidak ada perubahan yang perlu dikomit."
          else
            git commit -m "Sync driver or full source from upstream"
            git log -1 --oneline
            git push -u origin ${{ github.event.inputs.target_branch }}
          fi

      - name: List Synced Files
        run: |
          echo "üì¶ Daftar file di target-repo:"
          cd target-repo
          find . -type f | sort
