name: TEST v7

on:
  workflow_dispatch:
    inputs:
      copy_mode:
        description: 'Mode salin: all (semua file) atau custom (hanya folder tertentu)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - custom

      folders_to_include:
        description: 'Folder yang ingin disalin (pisahkan spasi, contoh: src include rtl8189fs)'
        required: false
        default: 'src include'
        type: string

      kernel_url:
        description: 'URL file arsip driver (tar.gz, zip, zst) â€“ isi "none" untuk skip download'
        required: false
        default: ''
        type: string

      repo_clone_url:
        description: 'Repo GitHub driver (jika tidak download). Contoh: https://github.com/ulli-kroll/rtl8189fs.git'
        required: false
        default: 'https://github.com/ulli-kroll/rtl8189fs.git'
        type: string

      driver_type:
        description: 'Path target dalam repo (misalnya: drivers/net/wireless/realtek/rtl8189fs)'
        required: false
        default: 'drivers/net/wireless/realtek/rtl8189fs'
        type: string

      target_repo:
        description: 'Target repo GitHub (contoh: houjie/linux-openwrt)'
        required: true
        type: string

      target_branch:
        description: 'Target branch di repo tujuan'
        required: false
        default: main
        type: string

jobs:
  kernel_sync:
    runs-on: ubuntu-latest
    env:
      PAT: ${{ secrets.TARGET_REPO_PAT }}

    steps:
      - name: Setup Vars
        id: vars
        run: |
          echo "kernel_url=${{ github.event.inputs.kernel_url }}" >> $GITHUB_OUTPUT
          echo "target_branch=${{ github.event.inputs.target_branch || 'main' }}" >> $GITHUB_OUTPUT

      - name: Normalize Target Repo
        id: fixrepo
        run: |
          repo="${{ github.event.inputs.target_repo }}"
          if [[ "$repo" == https://github.com/* ]]; then
            repo="${repo#https://github.com/}"
            repo="${repo%/}"
          fi
          echo "normalized_repo=$repo" >> $GITHUB_OUTPUT

      - name: Install Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 unzip megatools zstd patch
          python3 -m pip install --upgrade gdown

      # === DOWNLOAD MODE ===
      - name: Download Driver Archive
        if: ${{ github.event.inputs.kernel_url != '' && github.event.inputs.kernel_url != 'none' }}
        run: |
          mkdir -p kernel-archive-download
          url="${{ github.event.inputs.kernel_url }}"

          if [[ "$url" =~ mega\.nz ]]; then
            megadl --path=kernel-archive-download "$url"
          elif [[ "$url" =~ drive.google.com ]]; then
            FILE_ID=$(echo "$url" | grep -oP '(?<=/d/)[^/]+')
            [ -z "$FILE_ID" ] && FILE_ID=$(echo "$url" | grep -oP '(?<=id=)[^&]+')
            [ -z "$FILE_ID" ] && { echo "Invalid Google Drive URL"; exit 1; }
            cd kernel-archive-download && gdown "https://drive.google.com/uc?id=$FILE_ID" && cd ..
          else
            aria2c -q -x 16 -s 16 -d kernel-archive-download "$url"
          fi

      - name: Extract Archive
        if: ${{ github.event.inputs.kernel_url != '' && github.event.inputs.kernel_url != 'none' }}
        run: |
          mkdir -p kernel-extracted
          file_path=$(ls kernel-archive-download/* | head -n 1)
          mv "$file_path" kernel-archive
          type=$(file kernel-archive)

          if [[ "$type" =~ Zstandard ]]; then
            tar --use-compress-program=unzstd -xvf kernel-archive -C kernel-extracted
          elif [[ "$type" =~ gzip ]]; then
            tar -xzf kernel-archive -C kernel-extracted
          elif [[ "$type" =~ Zip ]]; then
            unzip -o kernel-archive -d kernel-extracted
          elif [[ "$type" =~ POSIX.*tar ]]; then
            tar -xf kernel-archive -C kernel-extracted
          else
            echo "Unsupported archive format"
            exit 1
          fi

      # === CLONE DRIVER REPO ===
      - name: Clone Driver Repo
        if: ${{ github.event.inputs.kernel_url == '' || github.event.inputs.kernel_url == 'none' }}
        run: |
          git clone --depth=1 "${{ github.event.inputs.repo_clone_url }}" driver-clone

      # === CLONE TARGET REPO ===
      - name: Clone Target Repo
        run: |
          git clone https://x-access-token:${PAT}@github.com/${{ steps.fixrepo.outputs.normalized_repo }}.git target-repo
          cd target-repo
          git checkout ${{ steps.vars.outputs.target_branch }} \
            || (echo "Branch not found, creating new branch" && git checkout -b ${{ steps.vars.outputs.target_branch }})

      # === COPY FROM REPO (custom or all) ===
      - name: Copy Driver from Repo
        if: ${{ github.event.inputs.kernel_url == '' || github.event.inputs.kernel_url == 'none' }}
        run: |
          mkdir -p "target-repo/${{ github.event.inputs.driver_type }}"
          cd driver-clone

          if [ "${{ github.event.inputs.copy_mode }}" = "custom" ]; then
            for dir in ${{ github.event.inputs.folders_to_include }}; do
              if [ -d "$dir" ]; then
                mkdir -p "../target-repo/${{ github.event.inputs.driver_type }}/$dir"
                cp -r "$dir/"* "../target-repo/${{ github.event.inputs.driver_type }}/$dir"
              fi
            done
          else
            cp -r * "../target-repo/${{ github.event.inputs.driver_type }}/"
          fi

          cd ..

      # === COPY FROM ARCHIVE (custom or all) ===
      - name: Copy Driver from Archive
        if: ${{ github.event.inputs.kernel_url != '' && github.event.inputs.kernel_url != 'none' }}
        run: |
          mkdir -p "target-repo/${{ github.event.inputs.driver_type }}"
          cd kernel-extracted

          entries=(*/)
          if [ ${#entries[@]} -eq 1 ]; then
            cd "${entries[0]}"
          fi

          if [ "${{ github.event.inputs.copy_mode }}" = "custom" ]; then
            for dir in ${{ github.event.inputs.folders_to_include }}; do
              if [ -d "$dir" ]; then
                mkdir -p "../../target-repo/${{ github.event.inputs.driver_type }}/$dir"
                cp -r "$dir/"* "../../target-repo/${{ github.event.inputs.driver_type }}/$dir"
              fi
            done
          else
            cp -r * "../../target-repo/${{ github.event.inputs.driver_type }}/"
          fi

          cd ../..

      - name: Commit and Push
        run: |
          cd target-repo
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add "${{ github.event.inputs.driver_type }}"
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Sync driver to ${{ github.event.inputs.driver_type }}"
            git push -u origin ${{ steps.vars.outputs.target_branch }}
          fi
